import {createStore} from "redux";

const form = document.querySelector('form');
const input = document.querySelector('input');
const ul = document.querySelector('ul');

const add_todo = "add_todo"
const delete_todo = "delete_todo"

const addTodo = (text) => {
    return{
    type: add_todo, 
    text
    }
}

const deleteTodo = (id) => {
    return {
    type: delete_todo, 
    id
    }
}

const reducer = (state = [], action) => {
    switch (action.type) { //action.text가 필요해보이는데?
        case add_todo:
            const newToDoObj = {text: action.text, id: Date.now()};
            return [...state, newToDoObj]; // {text: action.text, id: Date.now()}를 앞으로 옮기면 새로운 todo를 앞에 둘 수 있다
        case delete_todo:
            return state.filter((todo) => todo.id !== parseInt(action.id)); // id가 string 형태라 정확하게 parseInt()를 써서 받아온다
        default:
            return state;
    }
};

const store = createStore(reducer);

store.subscribe(() => console.log(store.getState()));

//
const paintToDos = () => {
    // getState() 의 현재 결과와 주어진 액션 과 함께 동기적으로 호출
    const toDos = store.getState(); 
    console.log(toDos)
    ul.innerHTML = "" // 리스트 전체를 비운다
    toDos.forEach(todo => { // state에 있는 각각의 todo를 이용해서 다시 새로운 list를 만든다
        const li = document.createElement('li');
        li.id = todo.id;
        li.innerText = todo.text;
        ul.appendChild(li);
        const btn = document.createElement('button');
        btn.className = "btn btn-outline-danger"
        btn.innerText = "DEL"
        btn.addEventListener('click', dispatchDeleteToDo);
        li.appendChild(btn);
    })
}

store.subscribe(paintToDos) // subscribe는 store 안에 있는 변화를 알 수 있게 한다.todo의 변화에 맞게 list를 repainting 하고 있다. (repaint는 react의 장점)

const dispatchAddTodo = (text) => {
    store.dispatch(addTodo(text)) // dispatch를 통해 action을 보낼 수 있다.
}

const dispatchDeleteToDo = (e) => {
    const id = parseInt(e.target.parentNode.id);
    console.log(e.target)
    store.dispatch(deleteTodo(id))
}

const submit = (e) => {
    e.preventDefault(); // 상위 엘리먼트에 전달되지 않게 막아 준다.
    const todo = input.value; // <input>에 할당되는 변수
    input.value = " ";
    dispatchAddTodo(todo);
}

form.addEventListener('submit', submit);

const add = document.getElementById('add');
add.addEventListener('click', submit);
